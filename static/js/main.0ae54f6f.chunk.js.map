{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","handleSubmit","event","a","preventDefault","date","target","value","diet","savedDiet","JSON","parse","localStorage","getItem","dietEntry","dietEntryToSave","setItem","stringify","className","style","marginBottom","width","height","margin","data","veganDiet","filter","vegetarianDiet","omnivoreDiet","title","length","color","getData","label","dataEntry","labelStyle","fontSize","onSubmit","type","name","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAwEeA,MApEf,WAOE,IAAMC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sDACjBD,EAAME,iBACAC,EAAOH,EAAMI,OAAOD,KAAKE,MACzBC,EAAON,EAAMI,OAAOE,KAAKD,MACzBE,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,GACxDC,EAAY,CAACT,OAAMG,QACrBO,EANa,sBAMSN,GANT,CAMoBK,IAErCF,aAAaI,QAAQ,OAAQN,KAAKO,UAAUF,IAR3B,2CAAH,sDAwBlB,OACE,sBAAKG,UAAU,MAAf,UACE,wBAAQC,MAAO,CAACC,aAAc,QAA9B,mBACE,qBAAKD,MAAO,CAACE,MAAO,MAAOC,OAAQ,QAASC,OAAQ,eAApD,SACI,cAAC,WAAD,CACIC,KAlBE,WACZ,IAAMf,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,GACxDY,EAAYhB,EAAUiB,QAAO,SAAClB,GAAD,MAAwB,UAAdA,EAAKA,QAC5CmB,EAAiBlB,EAAUiB,QAAO,SAAClB,GAAD,MAAwB,eAAdA,EAAKA,QACjDoB,EAAenB,EAAUiB,QAAO,SAAClB,GAAD,MAAwB,aAAdA,EAAKA,QAErD,MAAO,CACH,CAAEqB,MAAO,QAAStB,MAAOkB,EAAUK,OAAQC,MAAO,WAClD,CAAEF,MAAO,mBAActB,MAAOoB,EAAeG,OAAQC,MAAO,WAC5D,CAAEF,MAAO,WAAYtB,MAAOqB,EAAaE,OAAQC,MAAO,YAS5CC,GACNC,MAAO,gBAAGC,EAAH,EAAGA,UAAH,OACHA,EAAU3B,MAAQ,EAAlB,UAAyB2B,EAAUL,MAAnC,cAA8CK,EAAU3B,OAAU,MAEtE4B,WAAY,CAACC,SAAU,WAIjC,uBAAMC,SAAUpC,EAAhB,UACI,yCACS,IACL,uBAAOqC,KAAK,OAAOC,KAAK,OAAOC,GAAG,YAC9B,uBAAK,uBACf,qDAGE,uBAAOF,KAAK,QAAQC,KAAK,OAAOhC,MAAM,kBAChC,uBAAK,uBACX,6CAEE,uBAAO+B,KAAK,QAAQC,KAAK,OAAOhC,MAAM,aAChC,uBAAK,uBACb,6CAEA,uBAAO+B,KAAK,QAAQC,KAAK,OAAOhC,MAAM,gBAC9B,uBAAK,uBACb,wBAAQ+B,KAAK,SAAb,gCCtDKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ae54f6f.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport { PieChart } from 'react-minimal-pie-chart';\n\nfunction App() {\n    // const chart = PieChart(population, {\n    //     name: d => d.name,\n    //     value: d => d.value,\n    //     width,\n    //     height: 500\n    // })\n  const handleSubmit = async (event) => {\n      event.preventDefault()\n      const date = event.target.date.value;\n      const diet = event.target.diet.value;\n      const savedDiet = JSON.parse(localStorage.getItem(\"diet\")) || [];\n      const dietEntry = {date, diet};\n      let dietEntryToSave = [...savedDiet, dietEntry]\n\n      localStorage.setItem(\"diet\", JSON.stringify(dietEntryToSave))\n  }\n\n  const getData = () => {\n      const savedDiet = JSON.parse(localStorage.getItem(\"diet\")) || [];\n      const veganDiet = savedDiet.filter((diet) => diet.diet === \"vegan\")\n      const vegetarianDiet = savedDiet.filter((diet) => diet.diet === \"vegetarian\")\n      const omnivoreDiet = savedDiet.filter((diet) => diet.diet === \"omnivore\")\n\n      return [\n          { title: 'vegan', value: veganDiet.length, color: '#E38627' },\n          { title: 'végétarien', value: vegetarianDiet.length, color: '#C13C37' },\n          { title: 'omnivore', value: omnivoreDiet.length, color: '#6A2135' },\n      ]\n  }\n  \n  return (\n    <div className=\"App\">\n      <header style={{marginBottom: \"20px\"}}>My QS</header>\n        <div style={{width: \"70%\", height: \"300px\", margin: \"0 auto 30px\"}}>\n            <PieChart\n                data={getData()}\n                label={({ dataEntry }) => (\n                    dataEntry.value > 0 ? `${dataEntry.title} : ${dataEntry.value}` : null\n                )}\n                labelStyle={{fontSize: \"7px\"}}\n            />\n        </div>\n\n      <form onSubmit={handleSubmit}>\n          <label>\n              Date{\" \"}\n              <input type=\"date\" name=\"date\" id=\"date\"/>\n          </label><br/><br/>\n        <label>\n          Végétarien\n\n          <input type=\"radio\" name=\"diet\" value=\"vegetarian\"/>\n        </label><br/><br/>\n          <label>\n              Végan\n            <input type=\"radio\" name=\"diet\" value=\"vegan\"/>\n          </label><br/><br/>\n          <label>\n              Omnivore\n          <input type=\"radio\" name=\"diet\" value=\"omnivore\"/>\n          </label><br/><br/>\n          <button type=\"submit\">Enregistrer</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}