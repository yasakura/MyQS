{"version":3,"sources":["Pie.js","App.js","reportWebVitals.js","index.js"],"names":["Pie","useState","JSON","parse","localStorage","getItem","diets","setDiets","handleSubmit","event","a","preventDefault","date","target","value","diet","dietEntry","dateFilter","currentDateInSavedDiet","savedDiet","filter","currentDateIndexInSavedDiet","findIndex","isCurrentDateInSavedDiet","length","dietEntryToSave","splice","setItem","stringify","style","width","height","margin","display","justifyContent","alignItems","data","veganDiet","vegetarianDiet","omnivoreDiet","title","color","getData","label","dataEntry","Math","round","percentage","labelStyle","fontSize","onSubmit","type","name","id","border","borderRadius","padding","flexDirection","Date","today","dates","reduce","previousValue","currentValue","push","sort","b","abs","getNearestDate","toLocaleDateString","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.066dbb37.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\n\nconst Pie = () => {\n    const getSavedDiet = () => JSON.parse(localStorage.getItem(\"diet\")) || [];\n\n    const [diets, setDiets] = useState(getSavedDiet());\n\n    const getData = () => {\n        const savedDiet = diets;\n        const veganDiet = savedDiet.filter((diet) => diet.diet === \"vegan\")\n        const vegetarianDiet = savedDiet.filter((diet) => diet.diet === \"vegetarian\")\n        const omnivoreDiet = savedDiet.filter((diet) => diet.diet === \"omnivore\")\n\n        return [\n            { title: 'vegan', value: veganDiet.length, color: '#75DBCD' },\n            { title: 'végétarien', value: vegetarianDiet.length, color: '#FAA381' },\n            { title: 'omnivore', value: omnivoreDiet.length, color: '#DCDBA8' },\n        ]\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n        const date = event.target.date.value;\n        const diet = event.target.diet.value;\n        const savedDiet = diets;\n        const dietEntry = {date, diet};\n        const dateFilter = (diet) => diet.date === date\n        const currentDateInSavedDiet = savedDiet.filter(dateFilter)\n        const currentDateIndexInSavedDiet = savedDiet.findIndex(dateFilter)\n        const isCurrentDateInSavedDiet = currentDateInSavedDiet.length > 0;\n        let dietEntryToSave = [...savedDiet]\n\n        if(isCurrentDateInSavedDiet){\n            dietEntryToSave.splice(currentDateIndexInSavedDiet, 1)\n        }\n\n        dietEntryToSave = [...dietEntryToSave, dietEntry]\n\n        localStorage.setItem(\"diet\", JSON.stringify(dietEntryToSave))\n        setDiets(dietEntryToSave);\n    }\n\n    const getDatesFromSavedDiet = () => diets.reduce(\n        (previousValue, currentValue) => {\n            previousValue.push(currentValue.date)\n            return previousValue\n        }, []\n    )\n\n    const getNearestDate = () => {\n        const today = new Date();\n        const dates = getDatesFromSavedDiet()\n        const sortedByDiff = [...dates].sort((a,b) => {\n            return Math.abs(new Date(a) - today) - Math.abs(new Date(b) - today);\n        })\n        return sortedByDiff[0];\n    }\n\n    return (\n        <>\n            <div style={{width: \"70%\", height: \"300px\", margin: \"0 auto 30px\"}}>\n                {diets.length === 0\n                    ? <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\"}}>\n                        <p>Remplissez le formulaire ;)</p><\n                      /div>\n                    :  <PieChart\n                        data={getData()}\n                        label={({ dataEntry }) => (\n                            dataEntry.value > 0 ? `${dataEntry.title} : ${Math.round(dataEntry.percentage)}%` : null\n                        )}\n                        labelStyle={{fontSize: \"6px\"}}\n                    />\n                }\n            </div>\n\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Date{\" \"}\n                    <input type=\"date\" name=\"date\" id=\"date\"/>\n                </label><br/><br/><br/>\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-evenly\"}}>\n                    <label style={{border: \"solid 1px black\", height: \"100px\", borderRadius: \"5px\", padding: \"5px\", width: \"90px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\"}}>\n                        Végétarien <br/>\n\n                        <input type=\"radio\" name=\"diet\" value=\"vegetarian\"/>\n                    </label><br/><br/>\n                    <label style={{border: \"solid 1px black\", height: \"100px\", borderRadius: \"5px\", padding: \"5px\", width: \"90px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\"}}>\n                        Végan <br/>\n                        <input type=\"radio\" name=\"diet\" value=\"vegan\"/>\n                    </label><br/><br/>\n                    <label style={{border: \"solid 1px black\", height: \"100px\", borderRadius: \"5px\", padding: \"5px\", width: \"90px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\"}}>\n                        Omnivore <br/>\n                        <input type=\"radio\" name=\"diet\" value=\"omnivore\"/>\n                    </label>\n                </div>\n\n                <br/><br/>\n                <button type=\"submit\" style={{padding: \"10px 15px\"}}>Enregistrer</button>\n            </form>\n\n            <div>\n                <p>Nombre de jours : {diets.length}</p>\n                <p>Date la plus proche renseignée : {new Date(getNearestDate()).toLocaleDateString(\"fr\")}</p>\n            </div>\n        </>\n    );\n};\n\nPie.propTypes = {\n\n};\n\nexport default Pie;","// import logo from './logo.svg';\nimport './App.css';\nimport Pie from \"./Pie\";\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n      <header style={{margin: \"20px 0\"}}>My QS</header>\n            <Pie />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}