{"version":3,"sources":["Pie.js","App.js","reportWebVitals.js","index.js"],"names":["Pie","useState","JSON","parse","localStorage","getItem","diets","setDiets","handleSubmit","event","a","preventDefault","date","target","value","diet","meal","dietEntry","dateFilter","currentDateInSavedDiet","savedDiet","filter","currentDateIndexInSavedDiet","findIndex","isCurrentDateInSavedDiet","length","dietEntryToSave","splice","setItem","stringify","labelStyle","border","height","borderRadius","padding","width","display","alignItems","justifyContent","flexDirection","lunchLabelStyle","style","margin","data","veganDiet","vegetarianDiet","omnivoreDiet","title","color","getData","label","dataEntry","Math","round","percentage","fontSize","onSubmit","type","name","id","required","marginBottom","dietDates","reduce","previousValue","currentValue","push","item","index","indexOf","getDietNumber","Date","today","dates","sort","b","abs","getNearestDate","toLocaleDateString","App","className","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1c703dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\n\nconst Pie = () => {\n    const getSavedDiet = () => JSON.parse(localStorage.getItem(\"diet\")) || [];\n\n    const [diets, setDiets] = useState(getSavedDiet());\n\n    const getDietNumber = () => {\n        const dietDates = diets.reduce((previousValue, currentValue) => {\n            previousValue.push(currentValue.date)\n            return previousValue\n        }, [])\n\n        const dietDatesWithoutDuplicateDates = dietDates.filter((item, index) => dietDates.indexOf(item) === index)\n\n        return dietDatesWithoutDuplicateDates.length\n    }\n\n    const getData = () => {\n        const savedDiet = diets;\n        const veganDiet = savedDiet.filter((diet) => diet.diet === \"vegan\")\n        const vegetarianDiet = savedDiet.filter((diet) => diet.diet === \"vegetarian\")\n        const omnivoreDiet = savedDiet.filter((diet) => diet.diet === \"omnivore\")\n\n        return [\n            { title: 'vegan', value: veganDiet.length, color: '#75DBCD' },\n            { title: 'végétarien', value: vegetarianDiet.length, color: '#FAA381' },\n            { title: 'omnivore', value: omnivoreDiet.length, color: '#DCDBA8' },\n        ]\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n        const date = event.target.date.value;\n        const diet = event.target.diet.value;\n        const meal = event.target.meal.value;\n        const savedDiet = diets;\n        const dietEntry = {date, diet, meal};\n        const dateFilter = (diet) => diet.date === date && diet.meal === meal\n        const currentDateInSavedDiet = savedDiet.filter(dateFilter)\n        const currentDateIndexInSavedDiet = savedDiet.findIndex(dateFilter)\n        const isCurrentDateInSavedDiet = currentDateInSavedDiet.length > 0;\n        let dietEntryToSave = [...savedDiet]\n\n        if(isCurrentDateInSavedDiet){\n            dietEntryToSave.splice(currentDateIndexInSavedDiet, 1)\n        }\n\n        dietEntryToSave = [...dietEntryToSave, dietEntry]\n\n        localStorage.setItem(\"diet\", JSON.stringify(dietEntryToSave))\n        setDiets(dietEntryToSave);\n    }\n\n    const getDatesFromSavedDiet = () => diets.reduce(\n        (previousValue, currentValue) => {\n            previousValue.push(currentValue.date)\n            return previousValue\n        }, []\n    )\n\n    const getNearestDate = () => {\n        const today = new Date();\n        const dates = getDatesFromSavedDiet()\n        const sortedByDiff = [...dates].sort((a,b) => {\n            return Math.abs(new Date(a) - today) - Math.abs(new Date(b) - today);\n        })\n        return sortedByDiff[0];\n    }\n\n    const labelStyle = {\n        border: \"solid 1px black\",\n        height: \"100px\",\n        borderRadius: \"5px\",\n        padding: \"5px\",\n        width: \"100px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n    }\n\n    const lunchLabelStyle = {\n        ...labelStyle,\n        width: \"65px\",\n        height: \"65px\"\n    }\n\n    return (\n        <>\n            <div style={{width: \"70%\", height: \"300px\", margin: \"0 auto 30px\"}}>\n                {diets.length === 0\n                    ? <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\"}}>\n                        <p>Remplissez le formulaire ;)</p><\n                      /div>\n                    :  <PieChart\n                        data={getData()}\n                        label={({ dataEntry }) => (\n                            dataEntry.value > 0 ? `${dataEntry.title} : ${Math.round(dataEntry.percentage)}%` : null\n                        )}\n                        labelStyle={{fontSize: \"6px\"}}\n                    />\n                }\n            </div>\n\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Date{\" \"}\n                    <input type=\"date\" name=\"date\" id=\"date\" required/>\n                </label><br/><br/><br/>\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", marginBottom: \"40px\"}}>\n                    <label style={lunchLabelStyle}>\n                        Matin <br/>\n                        <input type=\"radio\" name=\"meal\" value=\"breakfast\" required/>\n                    </label><br/><br/>\n                    <label style={lunchLabelStyle}>\n                        Midi <br/>\n                        <input type=\"radio\" name=\"meal\" value=\"lunch\"/>\n                    </label><br/><br/>\n                    <label style={lunchLabelStyle}>\n                        Goûter <br/>\n                        <input type=\"radio\" name=\"meal\" value=\"snack\"/>\n                    </label><br/><br/>\n                    <label style={lunchLabelStyle}>\n                        Soir <br/>\n                        <input type=\"radio\" name=\"meal\" value=\"dinner\"/>\n                    </label>\n                </div>\n\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}}>\n                    <label style={labelStyle}>\n                        Végétarien <br/>\n                        <input type=\"radio\" name=\"diet\" value=\"vegetarian\" required/>\n                    </label><br/><br/>\n                    <label style={labelStyle}>\n                        Végan <br/>\n                        <input type=\"radio\" name=\"diet\" value=\"vegan\"/>\n                    </label><br/><br/>\n                    <label style={labelStyle}>\n                        Omnivore <br/>\n                        <input type=\"radio\" name=\"diet\" value=\"omnivore\"/>\n                    </label>\n                </div>\n\n                <br/><br/>\n                <button type=\"submit\" style={{padding: \"10px 15px\"}}>Enregistrer</button>\n            </form>\n\n            <div>\n                <p>Nombre de jours : {getDietNumber()}</p>\n                <p>Date la plus proche renseignée : {new Date(getNearestDate()).toLocaleDateString(\"fr\")}</p>\n            </div>\n        </>\n    );\n};\n\nPie.propTypes = {\n\n};\n\nexport default Pie;","// import logo from './logo.svg';\nimport './App.css';\nimport Pie from \"./Pie\";\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\" style={{maxWidth: \"375px\", margin: \"0 auto\", padding: \"0 10px\"}}>\n      <header style={{margin: \"20px 0\"}}>My QS</header>\n            <Pie />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}